@page "/"
@using System.Net.Sockets
@using System.Text;
@using TcpServer= Chat.TcpServer
@using PlayfairCipher= Chat.PlayfairCipher
@implements IAsyncDisposable
@inject IConfiguration Configuration

<PageTitle>Secure Chat</PageTitle>

<div class="box">
    <h3>ChatApp</h3>

    @if (errorMessage != null)
    {
        <p style="color: red;">@errorMessage</p>
    }
    @if (!Messages.Any())
    {
        <p>No messages received.</p>
    }

    <h3>Listening on Port: @ListeningPort</h3>

    <form>
        <label for="targetPort">Target Port:</label>
        <input id="targetPort" @bind="TargetPort" />
        <br />
        <label for="message">Message:</label>
        <br />
        <textarea id="message" @bind="message" name="message" rows="10" cols="30"></textarea>
        <br />
        <button @onclick="SendMessage">Send Message</button>
    </form>
    <button @onclick="ShowHideEncryptedMessages">@show_encrypted_text</button>
    <button @onclick="ClearMessages">Clear Messages</button>

    <div class="messages">
        @if (!show_encrypted)
        {
            <h4>Messages</h4>

            <div>
                @foreach (var message in Messages)
                {
                    <div class="messageBox">
                        @message.Content
                    </div>
                }
            </div>
        }
        @if (show_encrypted)
        {
            <h4>Encrypted Messages</h4>

            <div>
                @foreach (var message in Messages)
                {
                    <div class="messageBox">
                        @message.EncryptedContent
                    </div>
                }
            </div>
        }
    </div>
</div>

@code
{
    private static TcpServer tcpServer;
    private TcpClient tcpClient;

    private List<Message> Messages = new List<Message>();
    private List<string> EncryptedMessages = new List<string>();
    private string Key { get; set; }


    public string message { get; set; }
    public string errorMessage { get; set; }

    public int ListeningPort { get; set; }
    public int TargetPort { get; set; }

    private static bool show_encrypted = false;

    private string show_encrypted_text = "Show Encrypted Messages";


    protected override Task OnInitializedAsync()
    {
        Key = Configuration["key"];
        ListeningPort = Configuration.GetValue<int>("Application:ListeningPort");

        if (tcpServer == null)
        {
            Func<string, Task> x = HandleReceivedMessage;
            tcpServer = new TcpServer(ListeningPort, x);
            try
            {
                _ = tcpServer.StartServer();
            }
            catch (Exception e)
            {
                Console.WriteLine(e.Message);
                errorMessage = $"Error: {e.Message}";
            }
        }
        return base.OnInitializedAsync();
    }

    private async Task HandleReceivedMessage(string message)
    {
        string decryptedMessage = message;
        if (Key.Length != 0)
        {
            decryptedMessage = PlayfairCipher.DecryptByPlayfairCipher(message, Key);
        }
        Messages.Add(new Message(decryptedMessage, message));

        Console.WriteLine("Received: {0}", Messages.Count);

        await InvokeAsync(() => StateHasChanged());
    }

    public async ValueTask DisposeAsync()
    {
        await Task.CompletedTask;
    }

    private async Task SendMessage()
    {
        try
        {
            if (TargetPort > 0)
            {
                using (var tcpClient = new TcpClient())
                {
                    await tcpClient.ConnectAsync("127.0.0.1", TargetPort);

                    using (NetworkStream stream = tcpClient.GetStream())
                    {
                        if (Key.Length != 0)
                        {
                            message = PlayfairCipher.EncryptByPlayfairCipher(message, Key);
                        }
                        byte[] data = Encoding.ASCII.GetBytes(message);
                        await stream.WriteAsync(data, 0, data.Length);
                        Console.WriteLine($"Sent: {Encoding.ASCII.GetString(data)}");
                    }
                }

                message = "";
            }
        }
        catch (Exception e)
        {
            errorMessage = $"Error: {e.Message}";
        }
    }

    private async Task ClearMessages()
    {
        Console.WriteLine("clear");
        try
        {
            Messages = new();
            EncryptedMessages = new();
            await InvokeAsync(() => StateHasChanged());
        }
        catch (Exception e)
        {
            errorMessage = $"Error: {e.Message}";
            Console.WriteLine(e.Message);
        }
    }

    private void ShowHideEncryptedMessages()
    {
        show_encrypted = !show_encrypted;
        show_encrypted_text =show_encrypted? "Hide Encrypted Messages" : "Show Encrypted Messages";
        StateHasChanged();

    }
    

}